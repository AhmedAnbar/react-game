{"version":3,"sources":["logo.svg","QuizOption.js","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuizOption","callParent","props","checkResult","option","className","onClick","this","Component","Quiz","generateOptions","sum","resultsArray","randomNumberArray","length","randomNumber","indexOf","push","i","result","playGame","field1","field2","sort","a","b","Math","random","riddle","answer","state","gameOver","setState","play","correct","newScore","score","console","log","renderMessage","renderOptions","map","key","bind","min","max","floor","classNames","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1717676c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n\nclass QuizOption extends Component {\n  callParent = () => {\n    this.props.checkResult(this.props.option)\n  }\n  render() {\n    return (\n      <div className='fields animated zoomIn' onClick={this.callParent}>\n        <div className='field-block'>{this.props.option}</div>\n      </div>\n    )\n  }\n}\n\n// const QuizOption = (props) => {\n//   return (\n//     <div className='fields' onClick={props.checkResult(props.option)}>\n//       <div className='field-block'>{props.option}</div>\n//     </div>\n//   )\n// }\n\nexport default QuizOption;","import React, { Component } from 'react';\nimport QuizOption from './QuizOption';\nimport classNames from 'classnames'\n\nclass Quiz extends Component {\n  constructor() {\n    super()\n    this.renderMessage = this.renderMessage.bind(this);\n    let riddle = this.playGame();\n    this.state = {\n      riddle,\n      correct: false,\n      gameOver: false,\n      score: 0\n    }   \n  }\n\n  randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  generateOptions = (sum) => {\n    let resultsArray = [];\n    let randomNumberArray = [];\n\n    while(randomNumberArray.length <= 3) {\n      let randomNumber = this.randomNumber(1,19);\n      if(randomNumberArray.indexOf(randomNumber) > -1) continue;\n      randomNumberArray.push(randomNumber);\n    }\n\n    for(let i = 0; i < 3; i++) {\n      let addSubtract = this.randomNumber(0,1);\n      let result = sum;\n      if(addSubtract === 1) {\n        result += randomNumberArray[i];\n        resultsArray.push(result);\n      } else {\n        result -= randomNumberArray[i];\n        resultsArray.push(result);\n      }\n    }\n\n    return resultsArray;\n  }\n\n  playGame = () => {\n    let field1 = this.randomNumber(20, 50);\n    let field2 = this.randomNumber(20, 50);\n    let result = field1 + field2;\n    let resultsArray = this.generateOptions(result);\n    resultsArray.push(result);\n    resultsArray.sort((a,b) => { return 0.5 - Math.random() })\n    \n    let riddle = {\n      resultsArray: resultsArray,\n      field1: field1,\n      field2: field2,\n      answer: result\n    }\n\n    if(this.state && this.state.gameOver) {\n      this.setState({riddle})\n    } else {\n      return riddle;\n    }\n  }\n\n  play = () => {\n    if(this.state.correct) {\n      let newScore = this.state.score + 1;\n      this.setState({score: newScore})\n    } else {\n      this.setState({score: 0})\n    }\n    this.setState({\n      correct: false,\n      gameOver: false\n    });\n    this.playGame();\n  }\n\n  checkResult = (option) => {\n    if(this.state.riddle.answer === option) {\n      this.setState({\n        correct: true,\n        gameOver: true\n      })\n      console.log(\"Correct Answer\");\n    } else {\n      this.setState({\n        correct: false,\n        gameOver: true\n      })\n      console.log(\"Wrong Answer\");\n    }\n  }\n\n  renderMessage = () => {\n      if(this.state.correct) {\n        return (\n          <div>\n            <h1>Score: {this.state.score + 1}</h1><br />\n            <h3>Good job! Hit the button below to play again.</h3>\n          </div>\n        )\n      } else {\n        return <h3>ohhh ohhh! Hit the button below to play again.</h3>\n      }\n  }\n\n  renderOptions = () => {\n    return(\n      <div className='options'>\n        {this.state.riddle.resultsArray.map((option,i) => {\n            return(\n              <QuizOption option={option} key={i} checkResult={(option) => {this.checkResult(option)}}/>\n            )\n      })}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className='quiz'>\n        <div className='quize-content'>\n          <p className='question'>What is the sum of <span className='text-info'>{this.state.riddle.field1}</span> and <span className='text-info'>{this.state.riddle.field2}</span> ?</p>\n          {this.renderOptions()}\n        </div>\n        <div className={classNames(\"after animated zoomIn\",{'hide': !this.state.gameOver}, {'correct': this.state.correct}, {'wrong': !this.state.correct})}>\n          {this.renderMessage()}\n        </div>\n        <div>\n          Score: {this.state.score}\n        </div>\n        <div className='play-again'>\n          <a className='button' onClick={this.play}>Play Again</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Quiz;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './animate.min.css';\nimport Quiz from './Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n      </header>\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}